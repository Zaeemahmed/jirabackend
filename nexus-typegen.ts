/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    error?: string | null; // String
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Issue: { // root type
    assigneeId?: string | null; // String
    creatorId: string; // String!
    description: string; // String!
    id: string; // String!
    isBackLogTask: boolean; // Boolean!
    projectId: string; // String!
    reporterId?: string | null; // String
    sprintId: string; // String!
    status: string; // String!
  }
  Mutation: {};
  Project: { // root type
    id: string; // String!
    key: string; // String!
    name: string; // String!
    ownerId: string; // String!
    projectLeadId?: string | null; // String
  }
  Query: {};
  Sprint: { // root type
    endDate: string; // String!
    id: string; // String!
    number: number; // Int!
    projectId: string; // String!
    startDate: string; // String!
    status: string; // String!
  }
  User: { // root type
    email: string; // String!
    fullName: string; // String!
    id: string; // String!
    password: string; // String!
    profileImage?: string | null; // String
    site?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    error: string | null; // String
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Issue: { // field return type
    assignee: NexusGenRootTypes['User'] | null; // User
    assigneeId: string | null; // String
    createdBy: NexusGenRootTypes['User']; // User!
    creatorId: string; // String!
    description: string; // String!
    id: string; // String!
    isBackLogTask: boolean; // Boolean!
    projectId: string; // String!
    reporter: NexusGenRootTypes['User']; // User!
    reporterId: string | null; // String
    sprint: NexusGenRootTypes['Sprint']; // Sprint!
    sprintId: string; // String!
    status: string; // String!
  }
  Mutation: { // field return type
    createProject: NexusGenRootTypes['Project']; // Project!
    createSprint: NexusGenRootTypes['Sprint']; // Sprint!
    issueCreate: NexusGenRootTypes['Issue']; // Issue!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    setUserSite: NexusGenRootTypes['User'] | null; // User
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  Project: { // field return type
    backlog: Array<NexusGenRootTypes['Issue'] | null> | null; // [Issue]
    id: string; // String!
    key: string; // String!
    name: string; // String!
    owner: NexusGenRootTypes['User']; // User!
    ownerId: string; // String!
    projectLead: NexusGenRootTypes['User'] | null; // User
    projectLeadId: string | null; // String
    sprints: Array<NexusGenRootTypes['Sprint'] | null> | null; // [Sprint]
  }
  Query: { // field return type
    getUser: NexusGenRootTypes['User'] | null; // User
    issues: NexusGenRootTypes['Issue'][]; // [Issue!]!
    projects: NexusGenRootTypes['Project'][]; // [Project!]!
    sprints: NexusGenRootTypes['Sprint'][]; // [Sprint!]!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Sprint: { // field return type
    endDate: string; // String!
    id: string; // String!
    issues: Array<NexusGenRootTypes['Issue'] | null> | null; // [Issue]
    number: number; // Int!
    project: NexusGenRootTypes['Project']; // Project!
    projectId: string; // String!
    startDate: string; // String!
    status: string; // String!
  }
  User: { // field return type
    assignee: Array<NexusGenRootTypes['Issue'] | null> | null; // [Issue]
    email: string; // String!
    fullName: string; // String!
    id: string; // String!
    issues: Array<NexusGenRootTypes['Issue'] | null> | null; // [Issue]
    password: string; // String!
    profileImage: string | null; // String
    projectLead: Array<NexusGenRootTypes['Project'] | null> | null; // [Project]
    projects: Array<NexusGenRootTypes['Project'] | null> | null; // [Project]
    reporter: Array<NexusGenRootTypes['Issue'] | null> | null; // [Issue]
    site: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    error: 'String'
    token: 'String'
    user: 'User'
  }
  Issue: { // field return type name
    assignee: 'User'
    assigneeId: 'String'
    createdBy: 'User'
    creatorId: 'String'
    description: 'String'
    id: 'String'
    isBackLogTask: 'Boolean'
    projectId: 'String'
    reporter: 'User'
    reporterId: 'String'
    sprint: 'Sprint'
    sprintId: 'String'
    status: 'String'
  }
  Mutation: { // field return type name
    createProject: 'Project'
    createSprint: 'Sprint'
    issueCreate: 'Issue'
    login: 'AuthPayload'
    setUserSite: 'User'
    signup: 'AuthPayload'
  }
  Project: { // field return type name
    backlog: 'Issue'
    id: 'String'
    key: 'String'
    name: 'String'
    owner: 'User'
    ownerId: 'String'
    projectLead: 'User'
    projectLeadId: 'String'
    sprints: 'Sprint'
  }
  Query: { // field return type name
    getUser: 'User'
    issues: 'Issue'
    projects: 'Project'
    sprints: 'Sprint'
    users: 'User'
  }
  Sprint: { // field return type name
    endDate: 'String'
    id: 'String'
    issues: 'Issue'
    number: 'Int'
    project: 'Project'
    projectId: 'String'
    startDate: 'String'
    status: 'String'
  }
  User: { // field return type name
    assignee: 'Issue'
    email: 'String'
    fullName: 'String'
    id: 'String'
    issues: 'Issue'
    password: 'String'
    profileImage: 'String'
    projectLead: 'Project'
    projects: 'Project'
    reporter: 'Issue'
    site: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createProject: { // args
      key: string; // String!
      name: string; // String!
    }
    createSprint: { // args
      endDate: string; // String!
      projectId?: string | null; // String
      startDate: string; // String!
    }
    issueCreate: { // args
      assigneeId?: string | null; // String
      description: string; // String!
      isBackLogTask: boolean; // Boolean!
      projectId: string; // String!
      reporterId?: string | null; // String
      sprintId: string; // String!
      status: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    setUserSite: { // args
      email: string; // String!
      site: string; // String!
    }
    signup: { // args
      email: string; // String!
      fullName: string; // String!
      password: string; // String!
    }
  }
  Query: {
    getUser: { // args
      email: string; // String!
    }
    sprints: { // args
      projectId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}